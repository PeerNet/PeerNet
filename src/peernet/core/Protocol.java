/*
 * Copyright (c) 2003-2005 The BISON Project
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 2 as published by
 * the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 675 Mass Ave, Cambridge, MA 02139, USA.
 */
package peernet.core;

import peernet.transport.Address;





/**
 * Interface to identify protocols.
 * 
 * @author Alberto Montresor
 * @version $Revision: 1.5 $
 */
public abstract class Protocol implements Cloneable
{
  /**
   * This method is invoked by the scheduler to deliver events to the protcol.
   * Apart from the event object, information about the node and the protocol
   * identifier are also provided. Additional information can be accessed
   * through the {@link CommonState} class.
   * 
   * @param from the address of the event's sender
   * @param node the local node
   * @param pid the identifier of this protocol
   * @param event the delivered event
   */
  public abstract void processEvent(Address src, Node node, int pid,
      Object event);



  /**
   * A protocol which is defined by performing an algorithm in more or less
   * regular periodic intervals. This method is called by the simulator engine
   * once in each cycle with the appropriate parameters.
   * 
   * @param node the node on which this component is run
   * @param protocolID the id of this protocol in the protocol array
   */
  public abstract void nextCycle(Node node, int protocolID);



  public long nextDelay()
  {
    return 0;
  };



  /**
   * Returns a clone of the protocol. It is important to pay attention to
   * implement this carefully because in peersim all nodes are generated by
   * cloning except a prototype node. That is, the constructor of protocols is
   * used only to construct the prototype. Initialization can be done via
   * {@link Control}s.
   */
  public Object clone()
  {
    try
    {
      return super.clone();
    }
    catch (CloneNotSupportedException e)
    {
      e.printStackTrace();
      System.exit(-1);
      return null;
    }
  }
}
